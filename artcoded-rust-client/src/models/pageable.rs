/*
 * Artcoded
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::fmt::Display;

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Pageable {
    #[serde(rename = "page", skip_serializing_if = "Option::is_none")]
    pub page: Option<i32>,
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<i32>,
    #[serde(rename = "sort", skip_serializing_if = "Option::is_none")]
    pub sort: Option<Vec<String>>,
}

impl Display for Pageable {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "page={}&size={}{}",
            self.page.map(|p| p - 1).unwrap_or(0),
            self.size.unwrap_or(10),
            self.sort
                .as_ref()
                .map(|s| format!("&sort={}", s.join(",")))
                .unwrap_or("".into())
        )
    }
}
impl Pageable {
    pub fn new() -> Pageable {
        Pageable {
            page: None,
            size: None,
            sort: None,
        }
    }
}
