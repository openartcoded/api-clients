/*
 * Artcoded
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MailRequest {
    #[serde(rename = "to", skip_serializing_if = "Option::is_none")]
    pub to: Option<Vec<String>>,
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    #[serde(rename = "body", skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    #[serde(rename = "bcc", skip_serializing_if = "Option::is_none")]
    pub bcc: Option<bool>,
    #[serde(rename = "uploadIds", skip_serializing_if = "Option::is_none")]
    pub upload_ids: Option<Vec<String>>,
    #[serde(rename = "sendingDate", skip_serializing_if = "Option::is_none")]
    pub sending_date: Option<String>,
}

impl MailRequest {
    pub fn new() -> MailRequest {
        MailRequest {
            to: None,
            subject: None,
            body: None,
            bcc: None,
            upload_ids: None,
            sending_date: None,
        }
    }
}

