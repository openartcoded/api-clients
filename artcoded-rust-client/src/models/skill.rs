/*
 * Artcoded
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Skill {
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "softSkill", skip_serializing_if = "Option::is_none")]
    pub soft_skill: Option<bool>,
    #[serde(rename = "hardSkill", skip_serializing_if = "Option::is_none")]
    pub hard_skill: Option<bool>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

impl Skill {
    pub fn new() -> Skill {
        Skill {
            priority: None,
            name: None,
            soft_skill: None,
            hard_skill: None,
            tags: None,
        }
    }
}

